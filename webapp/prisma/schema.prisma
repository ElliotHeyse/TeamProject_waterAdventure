// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String
  password  String
  role      UserRole @default(PARENT)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  coach         Coach[]
  parent        Parent[]
  sessions      Session[]
  settings      UserSettings?  @relation("UserSettings")
  notifications Notification[]
}

enum UserRole {
  COACH
  PARENT
}

model Coach {
  id          String   @id @default(cuid())
  bio         String?
  specialties String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Outgoing relations
  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Incoming relations
  parents  Parent[]
  messages Message[] @relation("CoachMessages")
}

model Parent {
  id        String   @id @default(cuid())
  phone     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Outgoing relations
  userId  String  @unique
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  coachId String?
  Coach   Coach?  @relation(fields: [coachId], references: [id])

  // Incoming relations
  pupils   Pupil[]
  messages Message[] @relation("ParentMessages")
}

model Pupil {
  id          String   @id @default(cuid())
  name        String
  dateOfBirth DateTime
  progress    Int      @default(0)
  notes       String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Outgoing relations
  parentId String @unique
  parent   Parent @relation(fields: [parentId], references: [id])

  // Incoming relations
  submissions   Submission[]
  levelProgress LevelProgress[]
}

model Level {
  id          String   @id @default(cuid())
  duration    Int // in minutes
  levelNumber Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Incoming relations
  exercises        Exercise[]
  levelProgresses  LevelProgress[]
  submissions      Submission[]
  notifications    Notification[]
  languageContents LevelLanguageContent[]
}

model LevelLanguageContent {
  id         String   @id @default(cuid())
  language   String   @default("nl")
  title      String
  objectives String[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  // Outgoing relations
  levelId String
  level   Level  @relation(fields: [levelId], references: [id])
}

model Exercise {
  id             String   @id @default(cuid())
  exerciseNumber Int
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  // Outgoing relations
  levelId String
  level   Level  @relation(fields: [levelId], references: [id])

  // Incoming relations
  videos           Video[]
  languageContents ExerciseLanguageContent[]
}

model ExerciseLanguageContent {
  id          String   @id @default(cuid())
  language    String   @default("nl")
  location    String[]
  title       String
  description String[]
  important   String[]
  tips        String[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Outgoing relations
  exerciseId String
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
}

model Video {
  id        String   @id @default(cuid())
  path      String
  title     String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Outgoing relations
  exerciseId String
  exercise   Exercise @relation(fields: [exerciseId], references: [id])
}

model LevelProgress {
  id                 String    @id @default(cuid())
  firstPartCompleted Boolean   @default(false)
  completedAt        DateTime?
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  // Outgoing relations
  pupilId String
  pupil   Pupil  @relation(fields: [pupilId], references: [id])
  levelId String
  level   Level  @relation(fields: [levelId], references: [id])

  @@unique([pupilId, levelId])
}

model Submission {
  id        String           @id @default(cuid())
  videoUrl  String
  status    SubmissionStatus @default(PENDING)
  feedback  String?
  medal     Medal            @default(NONE)
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  // Outgoing relations
  levelId String
  level   Level  @relation(fields: [levelId], references: [id])
  pupilId String
  pupil   Pupil  @relation(fields: [pupilId], references: [id])
}

enum SubmissionStatus {
  PENDING
  REVIEWED
}

enum Medal {
  NONE
  BRONZE
  SILVER
  GOLD
}

model Session {
  id        String   @id @default(cuid())
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Outgoing relations
  userId String @unique
  user   User   @relation(fields: [userId], references: [id])

  @@index([token])
}

model UserSettings {
  id                 String   @id @default(cuid())
  pushNotifications  Boolean  @default(false)
  emailNotifications Boolean  @default(false)
  theme              Theme    @default(LIGHT)
  language           String   @default("nl")
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  // Outgoing relations
  userId String @unique
  user   User   @relation("UserSettings", fields: [userId], references: [id])
}

enum Theme {
  LIGHT
  DARK
}

model Message {
  id           String   @id @default(cuid())
  content      String
  isRead       Boolean  @default(false)
  isFromParent Boolean  @default(false)
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  // Outgoing relations
  coachId  String
  coach    Coach  @relation("CoachMessages", fields: [coachId], references: [id])
  parentId String
  parent   Parent @relation("ParentMessages", fields: [parentId], references: [id])
}

model Notification {
  id        String           @id @default(cuid())
  timestamp DateTime         @default(now())
  isRead    Boolean          @default(false)
  type      NotificationType
  title     String?
  body      String?
  createdAt DateTime         @default(now())
  updatedAt DateTime         @updatedAt

  // Outgoing relations
  userId  String
  user    User    @relation(fields: [userId], references: [id])
  levelId String? // necessary for href to feedback from notifications
  level   Level?  @relation(fields: [levelId], references: [id])
}

enum NotificationType {
  META
  MESSAGE
  FEEDBACK
}
